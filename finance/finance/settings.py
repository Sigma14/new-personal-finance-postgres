"""
Django settings for finance project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY")

mongodb_host = os.environ.get("NOSQL_HOST") or "localhost"
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # apps
    "my_finance",
    "mathfilters",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Customize Middleware
    "my_finance.auto_middleware.AutoMiddleware",
    # Error Tracking Middleware
    "my_finance.auto_middleware.AppErrorLogMiddleware",
]

ROOT_URLCONF = "finance.urls"
LOGIN_URL = "/login"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "my_finance.context_processors.user_category",
                "my_finance.context_processors.user_notes",
            ],
        },
    },
]

WSGI_APPLICATION = "finance.wsgi.application"
stock_app_url = "http://vuexy.myds.me:8071"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("NOSQL_ENGINE", "djongo"),
        "NAME": os.environ.get("NOSQL_NAME", "personal_finance"),
        "HOST": mongodb_host,
        "ENFORCE_SCHEMA": os.environ.get("NOSQL_ENFORCE_SCHEMA", True),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),  # base folder where manage.py resides
]


LANGUAGES = [
    ["en", "English"],
    ["fr", "Fran√ßais"],
    ["zh-hans", "Simplified Chinese"],
    ["de", "German"],
]

# AUTOTRANSLATE_TRANSLATOR_SERVICE = 'autotranslate.services.GoogleAPITranslatorService'
# GOOGLE_TRANSLATE_KEY = 'AIzaSyBzEC9MWjCMK_OrfI4CECEyctt_gLvXJhE'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


"""
- Logging Configuration
    - DEBUG: True
        - All logs (DEBUG, INFO, WARNING, ERROR, CRITICAL) will appear in the terminal
    - DEBUG: False
        - Only WARNING, ERROR, and CRITICAL logs will appear in the terminal
    - app_errors.log will be saved WARNING & above level logs
"""

LOG_FILE_PATH = os.path.join(BASE_DIR, "logs", "app_errors.log")

# Ensure the logs directory exists only if not in debug mode
if not DEBUG:
    logs_dir = os.path.dirname(LOG_FILE_PATH)
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(name)-12s %(asctime)s %(module)s %(message)s"
        },
        "simple": {
            "format": "%(levelname)s %(message)s"
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # Include the file handler only when DEBUG is False
        **(
            {
                "file": {
                    "level": "WARNING",
                    "class": "logging.FileHandler",
                    "filename": LOG_FILE_PATH,
                    "formatter": "verbose",
                }
            }
            if not DEBUG
            else {}
        ),
    },
    "root": {
        "level": "DEBUG" if DEBUG else "WARNING",
        "handlers": ["console"] if DEBUG else ["console", "file"],
    },
    "loggers": {
        "django": {
            "handlers": ["console"] if DEBUG else ["console", "file"],
            "level": "DEBUG" if DEBUG else "WARNING",
            "propagate": False,
        },
        "my_finance": {
            "handlers": ["console"] if DEBUG else ["file"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}




